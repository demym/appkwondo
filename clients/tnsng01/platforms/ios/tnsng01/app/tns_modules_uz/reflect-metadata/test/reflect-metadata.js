"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../Reflect");
var chai_1 = require("chai");
describe("Reflect.metadata", function () {
    it("ReturnsDecoratorFunction", function () {
        var result = Reflect.metadata("key", "value");
        chai_1.assert.equal(typeof result, "function");
    });
    it("DecoratorThrowsWithInvalidTargetWithTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        chai_1.assert.throws(function () { return decorator(undefined, "name"); }, TypeError);
    });
    it("DecoratorThrowsWithInvalidTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        chai_1.assert.throws(function () { return decorator({}, {}); }, TypeError);
    });
    it("OnTargetWithoutTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        var target = function () { };
        decorator(target);
        var result = Reflect.hasOwnMetadata("key", target, undefined);
        chai_1.assert.equal(result, true);
    });
    it("OnTargetWithTargetKey", function () {
        var decorator = Reflect.metadata("key", "value");
        var target = {};
        decorator(target, "name");
        var result = Reflect.hasOwnMetadata("key", target, "name");
        chai_1.assert.equal(result, true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmbGVjdC1tZXRhZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlZmxlY3QtbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxzQkFBb0I7QUFDcEIsNkJBQThCO0FBRTlCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtJQUN6QixFQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDM0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUMsYUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtRQUNoRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUE1QixDQUE0QixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1FBQ3RDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELGFBQU0sQ0FBQyxNQUFNLENBQUMsY0FBTSxPQUFBLFNBQVMsQ0FBQyxFQUFFLEVBQU8sRUFBRSxDQUFDLEVBQXRCLENBQXNCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDM0IsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakQsSUFBSSxNQUFNLEdBQUcsY0FBYSxDQUFDLENBQUE7UUFDM0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM5RCxhQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRTtRQUN4QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDZixTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTFCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzRCxhQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNC4xLjIgUmVmbGVjdC5tZXRhZGF0YSAoIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlIClcclxuLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jcmVmbGVjdC5tZXRhZGF0YVxyXG5cclxuaW1wb3J0IFwiLi4vUmVmbGVjdFwiO1xyXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiY2hhaVwiO1xyXG5cclxuZGVzY3JpYmUoXCJSZWZsZWN0Lm1ldGFkYXRhXCIsICgpID0+IHtcclxuICAgIGl0KFwiUmV0dXJuc0RlY29yYXRvckZ1bmN0aW9uXCIsICgpID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gUmVmbGVjdC5tZXRhZGF0YShcImtleVwiLCBcInZhbHVlXCIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgcmVzdWx0LCBcImZ1bmN0aW9uXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JUaHJvd3NXaXRoSW52YWxpZFRhcmdldFdpdGhUYXJnZXRLZXlcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3IgPSBSZWZsZWN0Lm1ldGFkYXRhKFwia2V5XCIsIFwidmFsdWVcIik7XHJcbiAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBkZWNvcmF0b3IodW5kZWZpbmVkLCBcIm5hbWVcIiksIFR5cGVFcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIkRlY29yYXRvclRocm93c1dpdGhJbnZhbGlkVGFyZ2V0S2V5XCIsICgpID0+IHtcclxuICAgICAgICBsZXQgZGVjb3JhdG9yID0gUmVmbGVjdC5tZXRhZGF0YShcImtleVwiLCBcInZhbHVlXCIpO1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gZGVjb3JhdG9yKHt9LCA8YW55Pnt9KSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiT25UYXJnZXRXaXRob3V0VGFyZ2V0S2V5XCIsICgpID0+IHtcclxuICAgICAgICBsZXQgZGVjb3JhdG9yID0gUmVmbGVjdC5tZXRhZGF0YShcImtleVwiLCBcInZhbHVlXCIpO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSBmdW5jdGlvbiAoKSB7fVxyXG4gICAgICAgIGRlY29yYXRvcih0YXJnZXQpO1xyXG5cclxuICAgICAgICBsZXQgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImtleVwiLCB0YXJnZXQsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHJlc3VsdCwgdHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIk9uVGFyZ2V0V2l0aFRhcmdldEtleVwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlY29yYXRvciA9IFJlZmxlY3QubWV0YWRhdGEoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0ge31cclxuICAgICAgICBkZWNvcmF0b3IodGFyZ2V0LCBcIm5hbWVcIik7XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwia2V5XCIsIHRhcmdldCwgXCJuYW1lXCIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQsIHRydWUpO1xyXG4gICAgfSk7XHJcbn0pOyJdfQ==