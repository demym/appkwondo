"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../Reflect");
var chai_1 = require("chai");
describe("Reflect.decorate", function () {
    it("ThrowsIfDecoratorsArgumentNotArrayForFunctionOverload", function () {
        var target = function () { };
        chai_1.assert.throws(function () { return Reflect.decorate(undefined, target, undefined, undefined); }, TypeError);
    });
    it("ThrowsIfTargetArgumentNotFunctionForFunctionOverload", function () {
        var decorators = [];
        var target = {};
        chai_1.assert.throws(function () { return Reflect.decorate(decorators, target, undefined, undefined); }, TypeError);
    });
    it("ThrowsIfDecoratorsArgumentNotArrayForPropertyOverload", function () {
        var target = {};
        var name = "name";
        chai_1.assert.throws(function () { return Reflect.decorate(undefined, target, name, undefined); }, TypeError);
    });
    it("ThrowsIfTargetArgumentNotObjectForPropertyOverload", function () {
        var decorators = [];
        var target = 1;
        var name = "name";
        chai_1.assert.throws(function () { return Reflect.decorate(decorators, target, name, undefined); }, TypeError);
    });
    it("ThrowsIfDecoratorsArgumentNotArrayForPropertyDescriptorOverload", function () {
        var target = {};
        var name = "name";
        var descriptor = {};
        chai_1.assert.throws(function () { return Reflect.decorate(undefined, target, name, descriptor); }, TypeError);
    });
    it("ThrowsIfTargetArgumentNotObjectForPropertyDescriptorOverload", function () {
        var decorators = [];
        var target = 1;
        var name = "name";
        var descriptor = {};
        chai_1.assert.throws(function () { return Reflect.decorate(decorators, target, name, descriptor); }, TypeError);
    });
    it("ExecutesDecoratorsInReverseOrderForFunctionOverload", function () {
        var order = [];
        var decorators = [
            function (target) { order.push(0); },
            function (target) { order.push(1); }
        ];
        var target = function () { };
        Reflect.decorate(decorators, target);
        chai_1.assert.deepEqual(order, [1, 0]);
    });
    it("ExecutesDecoratorsInReverseOrderForPropertyOverload", function () {
        var order = [];
        var decorators = [
            function (target, name) { order.push(0); },
            function (target, name) { order.push(1); }
        ];
        var target = {};
        var name = "name";
        Reflect.decorate(decorators, target, name, undefined);
        chai_1.assert.deepEqual(order, [1, 0]);
    });
    it("ExecutesDecoratorsInReverseOrderForPropertyDescriptorOverload", function () {
        var order = [];
        var decorators = [
            function (target, name) { order.push(0); },
            function (target, name) { order.push(1); }
        ];
        var target = {};
        var name = "name";
        var descriptor = {};
        Reflect.decorate(decorators, target, name, descriptor);
        chai_1.assert.deepEqual(order, [1, 0]);
    });
    it("DecoratorPipelineForFunctionOverload", function () {
        var A = function A() { };
        var B = function B() { };
        var decorators = [
            function (target) { return undefined; },
            function (target) { return A; },
            function (target) { return B; }
        ];
        var target = function () { };
        var result = Reflect.decorate(decorators, target);
        chai_1.assert.strictEqual(result, A);
    });
    it("DecoratorPipelineForPropertyOverload", function () {
        var A = {};
        var B = {};
        var decorators = [
            function (target, name) { return undefined; },
            function (target, name) { return A; },
            function (target, name) { return B; }
        ];
        var target = {};
        var result = Reflect.decorate(decorators, target, "name", undefined);
        chai_1.assert.strictEqual(result, A);
    });
    it("DecoratorPipelineForPropertyDescriptorOverload", function () {
        var A = {};
        var B = {};
        var C = {};
        var decorators = [
            function (target, name) { return undefined; },
            function (target, name) { return A; },
            function (target, name) { return B; }
        ];
        var target = {};
        var result = Reflect.decorate(decorators, target, "name", C);
        chai_1.assert.strictEqual(result, A);
    });
    it("DecoratorCorrectTargetInPipelineForFunctionOverload", function () {
        var sent = [];
        var A = function A() { };
        var B = function B() { };
        var decorators = [
            function (target) { sent.push(target); return undefined; },
            function (target) { sent.push(target); return undefined; },
            function (target) { sent.push(target); return A; },
            function (target) { sent.push(target); return B; }
        ];
        var target = function () { };
        Reflect.decorate(decorators, target);
        chai_1.assert.deepEqual(sent, [target, B, A, A]);
    });
    it("DecoratorCorrectTargetInPipelineForPropertyOverload", function () {
        var sent = [];
        var decorators = [
            function (target, name) { sent.push(target); },
            function (target, name) { sent.push(target); },
            function (target, name) { sent.push(target); },
            function (target, name) { sent.push(target); }
        ];
        var target = {};
        Reflect.decorate(decorators, target, "name");
        chai_1.assert.deepEqual(sent, [target, target, target, target]);
    });
    it("DecoratorCorrectNameInPipelineForPropertyOverload", function () {
        var sent = [];
        var decorators = [
            function (target, name) { sent.push(name); },
            function (target, name) { sent.push(name); },
            function (target, name) { sent.push(name); },
            function (target, name) { sent.push(name); }
        ];
        var target = {};
        Reflect.decorate(decorators, target, "name");
        chai_1.assert.deepEqual(sent, ["name", "name", "name", "name"]);
    });
    it("DecoratorCorrectTargetInPipelineForPropertyDescriptorOverload", function () {
        var sent = [];
        var A = {};
        var B = {};
        var C = {};
        var decorators = [
            function (target, name) { sent.push(target); return undefined; },
            function (target, name) { sent.push(target); return undefined; },
            function (target, name) { sent.push(target); return A; },
            function (target, name) { sent.push(target); return B; }
        ];
        var target = {};
        Reflect.decorate(decorators, target, "name", C);
        chai_1.assert.deepEqual(sent, [target, target, target, target]);
    });
    it("DecoratorCorrectNameInPipelineForPropertyDescriptorOverload", function () {
        var sent = [];
        var A = {};
        var B = {};
        var C = {};
        var decorators = [
            function (target, name) { sent.push(name); return undefined; },
            function (target, name) { sent.push(name); return undefined; },
            function (target, name) { sent.push(name); return A; },
            function (target, name) { sent.push(name); return B; }
        ];
        var target = {};
        Reflect.decorate(decorators, target, "name", C);
        chai_1.assert.deepEqual(sent, ["name", "name", "name", "name"]);
    });
    it("DecoratorCorrectDescriptorInPipelineForPropertyDescriptorOverload", function () {
        var sent = [];
        var A = {};
        var B = {};
        var C = {};
        var decorators = [
            function (target, name, descriptor) { sent.push(descriptor); return undefined; },
            function (target, name, descriptor) { sent.push(descriptor); return undefined; },
            function (target, name, descriptor) { sent.push(descriptor); return A; },
            function (target, name, descriptor) { sent.push(descriptor); return B; }
        ];
        var target = {};
        Reflect.decorate(decorators, target, "name", C);
        chai_1.assert.deepEqual(sent, [C, B, A, A]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmbGVjdC1kZWNvcmF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlZmxlY3QtZGVjb3JhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxzQkFBb0I7QUFDcEIsNkJBQThCO0FBRTlCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtJQUN6QixFQUFFLENBQUMsdURBQXVELEVBQUU7UUFDeEQsSUFBSSxNQUFNLEdBQUcsY0FBYSxDQUFDLENBQUM7UUFDNUIsYUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsRUFBekQsQ0FBeUQsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzREFBc0QsRUFBRTtRQUN2RCxJQUFJLFVBQVUsR0FBNkQsRUFBRSxDQUFDO1FBQzlFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixhQUFNLENBQUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUExRCxDQUEwRCxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQy9GLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFO1FBQ3hELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbEIsYUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsRUFBcEQsQ0FBb0QsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN6RixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRTtRQUNyRCxJQUFJLFVB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IHByb3BlcnR5S2V5IFssIGRlc2NyaXB0b3JdIF0gKVxyXG5cclxuaW1wb3J0IFwiLi4vUmVmbGVjdFwiO1xyXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiY2hhaVwiO1xyXG5cclxuZGVzY3JpYmUoXCJSZWZsZWN0LmRlY29yYXRlXCIsICgpID0+IHtcclxuICAgIGl0KFwiVGhyb3dzSWZEZWNvcmF0b3JzQXJndW1lbnROb3RBcnJheUZvckZ1bmN0aW9uT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSBmdW5jdGlvbigpIHsgfTtcclxuICAgICAgICBhc3NlcnQudGhyb3dzKCgpID0+IFJlZmxlY3QuZGVjb3JhdGUodW5kZWZpbmVkLCB0YXJnZXQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiVGhyb3dzSWZUYXJnZXRBcmd1bWVudE5vdEZ1bmN0aW9uRm9yRnVuY3Rpb25PdmVybG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnM6IChDbGFzc0RlY29yYXRvciB8IE1ldGhvZERlY29yYXRvciB8IFByb3BlcnR5RGVjb3JhdG9yKVtdID0gW107XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHt9O1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiVGhyb3dzSWZEZWNvcmF0b3JzQXJndW1lbnROb3RBcnJheUZvclByb3BlcnR5T3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSB7fTtcclxuICAgICAgICBsZXQgbmFtZSA9IFwibmFtZVwiO1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gUmVmbGVjdC5kZWNvcmF0ZSh1bmRlZmluZWQsIHRhcmdldCwgbmFtZSwgdW5kZWZpbmVkKSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiVGhyb3dzSWZUYXJnZXRBcmd1bWVudE5vdE9iamVjdEZvclByb3BlcnR5T3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3JzOiAoQ2xhc3NEZWNvcmF0b3IgfCBNZXRob2REZWNvcmF0b3IgfCBQcm9wZXJ0eURlY29yYXRvcilbXSA9IFtdO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSAxO1xyXG4gICAgICAgIGxldCBuYW1lID0gXCJuYW1lXCI7XHJcbiAgICAgICAgYXNzZXJ0LnRocm93cygoKSA9PiBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgbmFtZSwgdW5kZWZpbmVkKSwgVHlwZUVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiVGhyb3dzSWZEZWNvcmF0b3JzQXJndW1lbnROb3RBcnJheUZvclByb3BlcnR5RGVzY3JpcHRvck92ZXJsb2FkXCIsICgpID0+IHtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgbGV0IG5hbWUgPSBcIm5hbWVcIjtcclxuICAgICAgICBsZXQgZGVzY3JpcHRvciA9IHt9O1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gUmVmbGVjdC5kZWNvcmF0ZSh1bmRlZmluZWQsIHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvciksIFR5cGVFcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIlRocm93c0lmVGFyZ2V0QXJndW1lbnROb3RPYmplY3RGb3JQcm9wZXJ0eURlc2NyaXB0b3JPdmVybG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnM6IChDbGFzc0RlY29yYXRvciB8IE1ldGhvZERlY29yYXRvciB8IFByb3BlcnR5RGVjb3JhdG9yKVtdID0gW107XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IDE7XHJcbiAgICAgICAgbGV0IG5hbWUgPSBcIm5hbWVcIjtcclxuICAgICAgICBsZXQgZGVzY3JpcHRvciA9IHt9O1xyXG4gICAgICAgIGFzc2VydC50aHJvd3MoKCkgPT4gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpLCBUeXBlRXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJFeGVjdXRlc0RlY29yYXRvcnNJblJldmVyc2VPcmRlckZvckZ1bmN0aW9uT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBvcmRlcjogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBsZXQgZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiB2b2lkID0+IHsgb3JkZXIucHVzaCgwKTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiB2b2lkID0+IHsgb3JkZXIucHVzaCgxKTsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGZ1bmN0aW9uKCkgeyB9O1xyXG4gICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0KTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKG9yZGVyLCBbMSwgMF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJFeGVjdXRlc0RlY29yYXRvcnNJblJldmVyc2VPcmRlckZvclByb3BlcnR5T3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBvcmRlcjogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBsZXQgZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiB2b2lkID0+IHsgb3JkZXIucHVzaCgwKTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiB2b2lkID0+IHsgb3JkZXIucHVzaCgxKTsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHt9O1xyXG4gICAgICAgIGxldCBuYW1lID0gXCJuYW1lXCI7XHJcbiAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIG5hbWUsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgYXNzZXJ0LmRlZXBFcXVhbChvcmRlciwgWzEsIDBdKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiRXhlY3V0ZXNEZWNvcmF0b3JzSW5SZXZlcnNlT3JkZXJGb3JQcm9wZXJ0eURlc2NyaXB0b3JPdmVybG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IG9yZGVyOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3JzID0gW1xyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IHZvaWQgPT4geyBvcmRlci5wdXNoKDApOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IHZvaWQgPT4geyBvcmRlci5wdXNoKDEpOyB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgbGV0IG5hbWUgPSBcIm5hbWVcIjtcclxuICAgICAgICBsZXQgZGVzY3JpcHRvciA9IHt9O1xyXG4gICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKG9yZGVyLCBbMSwgMF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JQaXBlbGluZUZvckZ1bmN0aW9uT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBBID0gZnVuY3Rpb24gQSgpOiB2b2lkIHsgfTtcclxuICAgICAgICBsZXQgQiA9IGZ1bmN0aW9uIEIoKTogdm9pZCB7IH07XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IEZ1bmN0aW9uKTogYW55ID0+IHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiBhbnkgPT4geyByZXR1cm4gQTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiBhbnkgPT4geyByZXR1cm4gQjsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IGZ1bmN0aW9uICgpOiB2b2lkIHsgfTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQpO1xyXG4gICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChyZXN1bHQsIEEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JQaXBlbGluZUZvclByb3BlcnR5T3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBBID0ge307XHJcbiAgICAgICAgbGV0IEIgPSB7fTtcclxuICAgICAgICBsZXQgZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyByZXR1cm4gdW5kZWZpbmVkOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHJldHVybiBBOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHJldHVybiBCOyB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBcIm5hbWVcIiwgdW5kZWZpbmVkKTtcclxuICAgICAgICBhc3NlcnQuc3RyaWN0RXF1YWwocmVzdWx0LCBBKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiRGVjb3JhdG9yUGlwZWxpbmVGb3JQcm9wZXJ0eURlc2NyaXB0b3JPdmVybG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IEEgPSB7fTtcclxuICAgICAgICBsZXQgQiA9IHt9O1xyXG4gICAgICAgIGxldCBDID0ge307XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sKTogYW55ID0+IHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyByZXR1cm4gQTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyByZXR1cm4gQjsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHt9O1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgXCJuYW1lXCIsIEMpO1xyXG4gICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChyZXN1bHQsIEEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JDb3JyZWN0VGFyZ2V0SW5QaXBlbGluZUZvckZ1bmN0aW9uT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBzZW50OiBGdW5jdGlvbltdID0gW107XHJcbiAgICAgICAgbGV0IEEgPSBmdW5jdGlvbiBBKCk6IHZvaWQgeyB9O1xyXG4gICAgICAgIGxldCBCID0gZnVuY3Rpb24gQigpOiB2b2lkIHsgfTtcclxuICAgICAgICBsZXQgZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogRnVuY3Rpb24pOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgcmV0dXJuIEE7IH0sXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IEZ1bmN0aW9uKTogYW55ID0+IHsgc2VudC5wdXNoKHRhcmdldCk7IHJldHVybiBCOyB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gZnVuY3Rpb24gKCk6IHZvaWQgeyB9O1xyXG4gICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0KTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHNlbnQsIFt0YXJnZXQsIEIsIEEsIEFdKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiRGVjb3JhdG9yQ29ycmVjdFRhcmdldEluUGlwZWxpbmVGb3JQcm9wZXJ0eU92ZXJsb2FkXCIsICgpID0+IHtcclxuICAgICAgICBsZXQgc2VudDogT2JqZWN0W10gPSBbXTtcclxuICAgICAgICBsZXQgZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHsgfTtcclxuICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgXCJuYW1lXCIpO1xyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoc2VudCwgW3RhcmdldCwgdGFyZ2V0LCB0YXJnZXQsIHRhcmdldF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JDb3JyZWN0TmFtZUluUGlwZWxpbmVGb3JQcm9wZXJ0eU92ZXJsb2FkXCIsICgpID0+IHtcclxuICAgICAgICBsZXQgc2VudDogKHN5bWJvbCB8IHN0cmluZylbXSA9IFtdO1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3JzID0gW1xyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaChuYW1lKTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2gobmFtZSk7IH0sXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sKTogYW55ID0+IHsgc2VudC5wdXNoKG5hbWUpOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaChuYW1lKTsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHsgfTtcclxuICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgXCJuYW1lXCIpO1xyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoc2VudCwgW1wibmFtZVwiLCBcIm5hbWVcIiwgXCJuYW1lXCIsIFwibmFtZVwiXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdChcIkRlY29yYXRvckNvcnJlY3RUYXJnZXRJblBpcGVsaW5lRm9yUHJvcGVydHlEZXNjcmlwdG9yT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBzZW50OiBPYmplY3RbXSA9IFtdO1xyXG4gICAgICAgIGxldCBBID0geyB9O1xyXG4gICAgICAgIGxldCBCID0geyB9O1xyXG4gICAgICAgIGxldCBDID0geyB9O1xyXG4gICAgICAgIGxldCBkZWNvcmF0b3JzID0gW1xyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaCh0YXJnZXQpOyByZXR1cm4gdW5kZWZpbmVkOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaCh0YXJnZXQpOyByZXR1cm4gdW5kZWZpbmVkOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaCh0YXJnZXQpOyByZXR1cm4gQTsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2godGFyZ2V0KTsgcmV0dXJuIEI7IH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSB7IH07XHJcbiAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIFwibmFtZVwiLCBDKTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHNlbnQsIFt0YXJnZXQsIHRhcmdldCwgdGFyZ2V0LCB0YXJnZXRdKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KFwiRGVjb3JhdG9yQ29ycmVjdE5hbWVJblBpcGVsaW5lRm9yUHJvcGVydHlEZXNjcmlwdG9yT3ZlcmxvYWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGxldCBzZW50OiAoc3ltYm9sIHwgc3RyaW5nKVtdID0gW107XHJcbiAgICAgICAgbGV0IEEgPSB7IH07XHJcbiAgICAgICAgbGV0IEIgPSB7IH07XHJcbiAgICAgICAgbGV0IEMgPSB7IH07XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sKTogYW55ID0+IHsgc2VudC5wdXNoKG5hbWUpOyByZXR1cm4gdW5kZWZpbmVkOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaChuYW1lKTsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcclxuICAgICAgICAgICAgKHRhcmdldDogT2JqZWN0LCBuYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiBhbnkgPT4geyBzZW50LnB1c2gobmFtZSk7IHJldHVybiBBOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCk6IGFueSA9PiB7IHNlbnQucHVzaChuYW1lKTsgcmV0dXJuIEI7IH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSB7IH07XHJcbiAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIFwibmFtZVwiLCBDKTtcclxuICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHNlbnQsIFtcIm5hbWVcIiwgXCJuYW1lXCIsIFwibmFtZVwiLCBcIm5hbWVcIl0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJEZWNvcmF0b3JDb3JyZWN0RGVzY3JpcHRvckluUGlwZWxpbmVGb3JQcm9wZXJ0eURlc2NyaXB0b3JPdmVybG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbnQ6IFByb3BlcnR5RGVzY3JpcHRvcltdID0gW107XHJcbiAgICAgICAgbGV0IEEgPSB7IH07XHJcbiAgICAgICAgbGV0IEIgPSB7IH07XHJcbiAgICAgICAgbGV0IEMgPSB7IH07XHJcbiAgICAgICAgbGV0IGRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiBhbnkgPT4geyBzZW50LnB1c2goZGVzY3JpcHRvcik7IHJldHVybiB1bmRlZmluZWQ7IH0sXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiBhbnkgPT4geyBzZW50LnB1c2goZGVzY3JpcHRvcik7IHJldHVybiB1bmRlZmluZWQ7IH0sXHJcbiAgICAgICAgICAgICh0YXJnZXQ6IE9iamVjdCwgbmFtZTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpOiBhbnkgPT4geyBzZW50LnB1c2goZGVzY3JpcHRvcik7IHJldHVybiBBOyB9LFxyXG4gICAgICAgICAgICAodGFyZ2V0OiBPYmplY3QsIG5hbWU6IHN0cmluZyB8IHN5bWJvbCwgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKTogYW55ID0+IHsgc2VudC5wdXNoKGRlc2NyaXB0b3IpOyByZXR1cm4gQjsgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgbGV0IHRhcmdldCA9IHsgfTtcclxuICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgXCJuYW1lXCIsIEMpO1xyXG4gICAgICAgIGFzc2VydC5kZWVwRXF1YWwoc2VudCwgW0MsIEIsIEEsIEFdKTtcclxuICAgIH0pO1xyXG59KTtcclxuIl19