"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../common/utils");
Zone.__load_patch('fs', function (global, Zone, api) {
    var fs;
    try {
        fs = require('fs');
    }
    catch (err) {
    }
    var TO_PATCH_MACROTASK_METHODS = [
        'access', 'appendFile', 'chmod', 'chown', 'close', 'exists', 'fchmod',
        'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod',
        'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'read',
        'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rmdir', 'stat',
        'symlink', 'truncate', 'unlink', 'utimes', 'write', 'writeFile',
    ];
    if (fs) {
        TO_PATCH_MACROTASK_METHODS.filter(function (name) { return !!fs[name] && typeof fs[name] === 'function'; })
            .forEach(function (name) {
            utils_1.patchMacroTask(fs, name, function (self, args) {
                return {
                    name: 'fs.' + name,
                    args: args,
                    callbackIndex: args.length > 0 ? args.length - 1 : -1,
                    target: self
                };
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVFBLHlDQUErQztBQUUvQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFDLE1BQVcsRUFBRSxJQUFjLEVBQUUsR0FBaUI7SUFDckUsSUFBSSxFQUFPLENBQUM7SUFDWixJQUFJLENBQUM7UUFDSCxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUlELElBQU0sMEJBQTBCLEdBQUc7UUFDakMsUUFBUSxFQUFHLFlBQVksRUFBRSxPQUFPLEVBQUssT0FBTyxFQUFLLE9BQU8sRUFBTSxRQUFRLEVBQUssUUFBUTtRQUNuRixRQUFRLEVBQUcsV0FBVyxFQUFHLE9BQU8sRUFBSyxPQUFPLEVBQUssV0FBVyxFQUFFLFNBQVMsRUFBSSxRQUFRO1FBQ25GLFFBQVEsRUFBRyxNQUFNLEVBQVEsT0FBTyxFQUFLLE9BQU8sRUFBSyxTQUFTLEVBQUksTUFBTSxFQUFPLE1BQU07UUFDakYsU0FBUyxFQUFFLFVBQVUsRUFBSSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBSyxPQUFPLEVBQU0sTUFBTTtRQUNqRixTQUFTLEVBQUUsVUFBVSxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksT0FBTyxFQUFNLFdBQVc7S0FDMUUsQ0FBQztJQUVGLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDUCwwQkFBMEIsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBNUMsQ0FBNEMsQ0FBQzthQUNsRixPQUFPLENBQUMsVUFBQSxJQUFJO1lBQ1gsc0JBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQUMsSUFBUyxFQUFFLElBQVc7Z0JBQzlDLE1BQU0sQ0FBQztvQkFDTCxJQUFJLEVBQUUsS0FBSyxHQUFHLElBQUk7b0JBQ2xCLElBQUksRUFBRSxJQUFJO29CQUNWLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JELE1BQU0sRUFBRSxJQUFJO2lCQUNiLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge3BhdGNoTWFjcm9UYXNrfSBmcm9tICcuLi9jb21tb24vdXRpbHMnO1xuXG5ab25lLl9fbG9hZF9wYXRjaCgnZnMnLCAoZ2xvYmFsOiBhbnksIFpvbmU6IFpvbmVUeXBlLCBhcGk6IF9ab25lUHJpdmF0ZSkgPT4ge1xuICBsZXQgZnM6IGFueTtcbiAgdHJ5IHtcbiAgICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICB9XG5cbiAgLy8gd2F0Y2gsIHdhdGNoRmlsZSwgdW53YXRjaEZpbGUgaGFzIGJlZW4gcGF0Y2hlZFxuICAvLyBiZWNhdXNlIEV2ZW50RW1pdHRlciBoYXMgYmVlbiBwYXRjaGVkXG4gIGNvbnN0IFRPX1BBVENIX01BQ1JPVEFTS19NRVRIT0RTID0gW1xuICAgICdhY2Nlc3MnLCAgJ2FwcGVuZEZpbGUnLCAnY2htb2QnLCAgICAnY2hvd24nLCAgICAnY2xvc2UnLCAgICAgJ2V4aXN0cycsICAgICdmY2htb2QnLFxuICAgICdmY2hvd24nLCAgJ2ZkYXRhc3luYycsICAnZnN0YXQnLCAgICAnZnN5bmMnLCAgICAnZnRydW5jYXRlJywgJ2Z1dGltZXMnLCAgICdsY2htb2QnLFxuICAgICdsY2hvd24nLCAgJ2xpbmsnLCAgICAgICAnbHN0YXQnLCAgICAnbWtkaXInLCAgICAnbWtkdGVtcCcsICAgJ29wZW4nLCAgICAgICdyZWFkJyxcbiAgICAncmVhZGRpcicsICdyZWFkRmlsZScsICAgJ3JlYWRsaW5rJywgJ3JlYWxwYXRoJywgJ3JlbmFtZScsICAgICdybWRpcicsICAgICAnc3RhdCcsXG4gICAgJ3N5bWxpbmsnLCAndHJ1bmNhdGUnLCAgICd1bmxpbmsnLCAgICd1dGltZXMnLCAgICd3cml0ZScsICAgICAnd3JpdGVGaWxlJyxcbiAgXTtcblxuICBpZiAoZnMpIHtcbiAgICBUT19QQVRDSF9NQUNST1RBU0tfTUVUSE9EUy5maWx0ZXIobmFtZSA9PiAhIWZzW25hbWVdICYmIHR5cGVvZiBmc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgcGF0Y2hNYWNyb1Rhc2soZnMsIG5hbWUsIChzZWxmOiBhbnksIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBuYW1lOiAnZnMuJyArIG5hbWUsXG4gICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgIGNhbGxiYWNrSW5kZXg6IGFyZ3MubGVuZ3RoID4gMCA/IGFyZ3MubGVuZ3RoIC0gMSA6IC0xLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHNlbGZcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICB9XG59KTsiXX0=