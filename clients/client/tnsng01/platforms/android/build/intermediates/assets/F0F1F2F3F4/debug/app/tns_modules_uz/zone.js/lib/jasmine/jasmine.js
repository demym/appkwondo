'use strict';
(function () {
    var __extends = function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    if (!Zone)
        throw new Error('Missing: zone.js');
    if (typeof jasmine == 'undefined')
        throw new Error('Missing: jasmine.js');
    if (jasmine['__zone_patch__'])
        throw new Error('\'jasmine\' has already been patched with \'Zone\'.');
    jasmine['__zone_patch__'] = true;
    var SyncTestZoneSpec = Zone['SyncTestZoneSpec'];
    var ProxyZoneSpec = Zone['ProxyZoneSpec'];
    if (!SyncTestZoneSpec)
        throw new Error('Missing: SyncTestZoneSpec');
    if (!ProxyZoneSpec)
        throw new Error('Missing: ProxyZoneSpec');
    var ambientZone = Zone.current;
    var syncZone = ambientZone.fork(new SyncTestZoneSpec('jasmine.describe'));
    var testProxyZone = null;
    var jasmineEnv = jasmine.getEnv();
    ['describe', 'xdescribe', 'fdescribe'].forEach(function (methodName) {
        var originalJasmineFn = jasmineEnv[methodName];
        jasmineEnv[methodName] = function (description, specDefinitions) {
            return originalJasmineFn.call(this, description, wrapDescribeInZone(specDefinitions));
        };
    });
    ['it', 'xit', 'fit'].forEach(function (methodName) {
        var originalJasmineFn = jasmineEnv[methodName];
        jasmineEnv[methodName] = function (description, specDefinitions, timeout) {
            arguments[1] = wrapTestInZone(specDefinitions);
            return originalJasmineFn.apply(this, arguments);
        };
    });
    ['beforeEach', 'afterEach'].forEach(function (methodName) {
        var originalJasmineFn = jasmineEnv[methodName];
        jasmineEnv[methodName] = function (specDefinitions, timeout) {
            arguments[0] = wrapTestInZone(specDefinitions);
            return originalJasmineFn.apply(this, arguments);
        };
    });
    function wrapDescribeInZone(describeBody) {
        return function () {
            return syncZone.run(describeBody, this, arguments);
        };
    }
    function wrapTestInZone(testBody) {
        return testBody && (testBody.length ? function (done) {
            return testProxyZone.run(testBody, this, [done]);
        } : function () {
            return testProxyZone.run(testBody, this);
        });
    }
    var QueueRunner = jasmine.QueueRunner;
    jasmine.QueueRunner = (function (_super) {
        __extends(ZoneQueueRunner, _super);
        function ZoneQueueRunner(attrs) {
            attrs.onComplete = (function (fn) { return function () {
                testProxyZone = null;
                ambientZone.scheduleMicroTask('jasmine.onComplete', fn);
            }; })(attrs.onComplete);
            _super.call(this, attrs);
        }
        ZoneQueueRunner.prototype.execute = function () {
            var _this = this;
            if (Zone.current !== ambientZone)
                throw new Error('Unexpected Zone: ' + Zone.current.name);
            testProxyZone = ambientZone.fork(new ProxyZoneSpec());
            if (!Zone.currentTask) {
                Zone.current.scheduleMicroTask('jasmine.execute().forceTask', function () { return QueueRunner.prototype.execute.call(_this); });
            }
            else {
                _super.prototype.execute.call(this);
            }
        };
        return ZoneQueueRunner;
    }(QueueRunner));
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFzbWluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImphc21pbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsWUFBWSxDQUFDO0FBQ2IsQ0FBQztJQUNDLElBQU0sU0FBUyxHQUFHLFVBQVMsQ0FBTSxFQUFFLENBQU07UUFDdkMsR0FBRyxDQUFDLENBQUMsSUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QztZQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFLLEVBQVUsRUFBRSxDQUFDLENBQUM7SUFDaEcsQ0FBQyxDQUFDO0lBR0YsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDL0MsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLElBQUksV0FBVyxDQUFDO1FBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzFFLEVBQUUsQ0FBQyxDQUFFLE9BQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztJQUN4RSxPQUFlLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFMUMsSUFBTSxnQkFBZ0IsR0FBb0MsSUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDM0YsSUFBTSxh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V0FBVyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG4oKCkgPT4ge1xuICBjb25zdCBfX2V4dGVuZHMgPSBmdW5jdGlvbihkOiBhbnksIGI6IGFueSkge1xuICAgIGZvciAoY29uc3QgcCBpbiBiKVxuICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyAoX18gYXMgYW55KSgpKTtcbiAgfTtcbiAgLy8gUGF0Y2ggamFzbWluZSdzIGRlc2NyaWJlL2l0L2JlZm9yZUVhY2gvYWZ0ZXJFYWNoIGZ1bmN0aW9ucyBzbyB0ZXN0IGNvZGUgYWx3YXlzIHJ1bnNcbiAgLy8gaW4gYSB0ZXN0Wm9uZSAoUHJveHlab25lKS4gKFNlZTogYW5ndWxhci96b25lLmpzIzkxICYgYW5ndWxhci9hbmd1bGFyIzEwNTAzKVxuICBpZiAoIVpvbmUpIHRocm93IG5ldyBFcnJvcignTWlzc2luZzogem9uZS5qcycpO1xuICBpZiAodHlwZW9mIGphc21pbmUgPT0gJ3VuZGVmaW5lZCcpIHRocm93IG5ldyBFcnJvcignTWlzc2luZzogamFzbWluZS5qcycpO1xuICBpZiAoKGphc21pbmUgYXMgYW55KVsnX196b25lX3BhdGNoX18nXSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcJ2phc21pbmVcXCcgaGFzIGFscmVhZHkgYmVlbiBwYXRjaGVkIHdpdGggXFwnWm9uZVxcJy4nKTtcbiAgKGphc21pbmUgYXMgYW55KVsnX196b25lX3BhdGNoX18nXSA9IHRydWU7XG5cbiAgY29uc3QgU3luY1Rlc3Rab25lU3BlYzoge25ldyAobmFtZTogc3RyaW5nKTogWm9uZVNwZWN9ID0gKFpvbmUgYXMgYW55KVsnU3luY1Rlc3Rab25lU3BlYyddO1xuICBjb25zdCBQcm94eVpvbmVTcGVjOiB7bmV3ICgpOiBab25lU3BlY30gPSAoWm9uZSBhcyBhbnkpWydQcm94eVpvbmVTcGVjJ107XG4gIGlmICghU3luY1Rlc3Rab25lU3BlYykgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nOiBTeW5jVGVzdFpvbmVTcGVjJyk7XG4gIGlmICghUHJveHlab25lU3BlYykgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nOiBQcm94eVpvbmVTcGVjJyk7XG5cbiAgY29uc3QgYW1iaWVudFpvbmUgPSBab25lLmN1cnJlbnQ7XG4gIC8vIENyZWF0ZSBhIHN5bmNocm9ub3VzLW9ubHkgem9uZSBpbiB3aGljaCB0byBydW4gYGRlc2NyaWJlYCBibG9ja3MgaW4gb3JkZXIgdG8gcmFpc2UgYW5cbiAgLy8gZXJyb3IgaWYgYW55IGFzeW5jaHJvbm91cyBvcGVyYXRpb25zIGFyZSBhdHRlbXB0ZWQgaW5zaWRlIG9mIGEgYGRlc2NyaWJlYCBidXQgb3V0c2lkZSBvZlxuICAvLyBhIGBiZWZvcmVFYWNoYCBvciBgaXRgLlxuICBjb25zdCBzeW5jWm9uZSA9IGFtYmllbnRab25lLmZvcmsobmV3IFN5bmNUZXN0Wm9uZVNwZWMoJ2phc21pbmUuZGVzY3JpYmUnKSk7XG5cbiAgLy8gVGhpcyBpcyB0aGUgem9uZSB3aGljaCB3aWxsIGJlIHVzZWQgZm9yIHJ1bm5pbmcgaW5kaXZpZHVhbCB0ZXN0cy5cbiAgLy8gSXQgd2lsbCBiZSBhIHByb3h5IHpvbmUsIHNvIHRoYXQgdGhlIHRlc3RzIGZ1bmN0aW9uIGNhbiByZXRyb2FjdGl2ZWx5IGluc3RhbGxcbiAgLy8gZGlmZmVyZW50IHpvbmVzLlxuICAvLyBFeGFtcGxlOlxuICAvLyAgIC0gSW4gYmVmb3JlRWFjaCgpIGRvIGNoaWxkWm9uZSA9IFpvbmUuY3VycmVudC5mb3JrKC4uLik7XG4gIC8vICAgLSBJbiBpdCgpIHRyeSB0byBkbyBmYWtlQXN5bmMoKS4gVGhlIGlzc3VlIGlzIHRoYXQgYmVjYXVzZSB0aGUgYmVmb3JlRWFjaCBmb3JrZWQgdGhlXG4gIC8vICAgICB6b25lIG91dHNpZGUgb2YgZmFrZUFzeW5jIGl0IHdpbGwgYmUgYWJsZSB0byBlc2NhcGUgdGhlIGZha2VBc3luYyBydWxlcy5cbiAgLy8gICAtIEJlY2F1c2UgUHJveHlab25lIGlzIHBhcmVudCBmbyBgY2hpbGRab25lYCBmYWtlQXN5bmMgY2FuIHJldHJvYWN0aXZlbHkgYWRkXG4gIC8vICAgICBmYWtlQXN5bmMgYmVoYXZpb3IgdG8gdGhlIGNoaWxkWm9uZS5cbiAgbGV0IHRlc3RQcm94eVpvbmU6IFpvbmUgPSBudWxsO1xuXG4gIC8vIE1vbmtleSBwYXRjaCBhbGwgb2YgdGhlIGphc21pbmUgRFNMIHNvIHRoYXQgZWFjaCBmdW5jdGlvbiBydW5zIGluIGFwcHJvcHJpYXRlIHpvbmUuXG4gIGNvbnN0IGphc21pbmVFbnY6IGFueSA9IGphc21pbmUuZ2V0RW52KCk7XG4gIFsnZGVzY3JpYmUnLCAneGRlc2NyaWJlJywgJ2ZkZXNjcmliZSddLmZvckVhY2goKG1ldGhvZE5hbWUpID0+IHtcbiAgICBsZXQgb3JpZ2luYWxKYXNtaW5lRm46IEZ1bmN0aW9uID0gamFzbWluZUVudlttZXRob2ROYW1lXTtcbiAgICBqYXNtaW5lRW52W21ldGhvZE5hbWVdID0gZnVuY3Rpb24oZGVzY3JpcHRpb246IHN0cmluZywgc3BlY0RlZmluaXRpb25zOiBGdW5jdGlvbikge1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSmFzbWluZUZuLmNhbGwodGhpcywgZGVzY3JpcHRpb24sIHdyYXBEZXNjcmliZUluWm9uZShzcGVjRGVmaW5pdGlvbnMpKTtcbiAgICB9O1xuICB9KTtcbiAgWydpdCcsICd4aXQnLCAnZml0J10uZm9yRWFjaCgobWV0aG9kTmFtZSkgPT4ge1xuICAgIGxldCBvcmlnaW5hbEphc21pbmVGbjogRnVuY3Rpb24gPSBqYXNtaW5lRW52W21ldGhvZE5hbWVdO1xuICAgIGphc21pbmVFbnZbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZywgc3BlY0RlZmluaXRpb25zOiBGdW5jdGlvbiwgdGltZW91dDogbnVtYmVyKSB7XG4gICAgICBhcmd1bWVudHNbMV0gPSB3cmFwVGVzdEluWm9uZShzcGVjRGVmaW5pdGlvbnMpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSmFzbWluZUZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG4gIFsnYmVmb3JlRWFjaCcsICdhZnRlckVhY2gnXS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgbGV0IG9yaWdpbmFsSmFzbWluZUZuOiBGdW5jdGlvbiA9IGphc21pbmVFbnZbbWV0aG9kTmFtZV07XG4gICAgamFzbWluZUVudlttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKHNwZWNEZWZpbml0aW9uczogRnVuY3Rpb24sIHRpbWVvdXQ6IG51bWJlcikge1xuICAgICAgYXJndW1lbnRzWzBdID0gd3JhcFRlc3RJblpvbmUoc3BlY0RlZmluaXRpb25zKTtcbiAgICAgIHJldHVybiBvcmlnaW5hbEphc21pbmVGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBHZXRzIGEgZnVuY3Rpb24gd3JhcHBpbmcgdGhlIGJvZHkgb2YgYSBKYXNtaW5lIGBkZXNjcmliZWAgYmxvY2sgdG8gZXhlY3V0ZSBpbiBhXG4gICAqIHN5bmNocm9ub3VzLW9ubHkgem9uZS5cbiAgICovXG4gIGZ1bmN0aW9uIHdyYXBEZXNjcmliZUluWm9uZShkZXNjcmliZUJvZHk6IEZ1bmN0aW9uKTogRnVuY3Rpb24ge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzeW5jWm9uZS5ydW4oZGVzY3JpYmVCb2R5LCB0aGlzLCBhcmd1bWVudHMgYXMgYW55IGFzIGFueVtdKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBmdW5jdGlvbiB3cmFwcGluZyB0aGUgYm9keSBvZiBhIEphc21pbmUgYGl0L2JlZm9yZUVhY2gvYWZ0ZXJFYWNoYCBibG9jayB0b1xuICAgKiBleGVjdXRlIGluIGEgUHJveHlab25lIHpvbmUuXG4gICAqIFRoaXMgd2lsbCBydW4gaW4gYHRlc3RQcm94eVpvbmVgLiBUaGUgYHRlc3RQcm94eVpvbmVgIHdpbGwgYmUgcmVzZXQgYnkgdGhlIGBab25lUXVldWVSdW5uZXJgXG4gICAqL1xuICBmdW5jdGlvbiB3cmFwVGVzdEluWm9uZSh0ZXN0Qm9keTogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgLy8gVGhlIGBkb25lYCBjYWxsYmFjayBpcyBvbmx5IHBhc3NlZCB0aHJvdWdoIGlmIHRoZSBmdW5jdGlvbiBleHBlY3RzIGF0IGxlYXN0IG9uZSBhcmd1bWVudC5cbiAgICAvLyBOb3RlIHdlIGhhdmUgdG8gbWFrZSBhIGZ1bmN0aW9uIHdpdGggY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzLCBvdGhlcndpc2UgamFzbWluZSB3aWxsXG4gICAgLy8gdGhpbmsgdGhhdCBhbGwgZnVuY3Rpb25zIGFyZSBzeW5jIG9yIGFzeW5jLlxuICAgIHJldHVybiB0ZXN0Qm9keSAmJiAodGVzdEJvZHkubGVuZ3RoID8gZnVuY3Rpb24oZG9uZTogRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICByZXR1cm4gdGVzdFByb3h5Wm9uZS5ydW4odGVzdEJvZHksIHRoaXMsIFtkb25lXSk7XG4gICAgICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICByZXR1cm4gdGVzdFByb3h5Wm9uZS5ydW4odGVzdEJvZHksIHRoaXMpO1xuICAgICAgICAgICB9KTtcbiAgfVxuICBpbnRlcmZhY2UgUXVldWVSdW5uZXIge1xuICAgIGV4ZWN1dGUoKTogdm9pZDtcbiAgfVxuICBpbnRlcmZhY2UgUXVldWVSdW5uZXJBdHRycyB7XG4gICAgcXVldWVhYmxlRm5zOiB7Zm46IEZ1bmN0aW9ufVtdO1xuICAgIG9uQ29tcGxldGU6ICgpID0+IHZvaWQ7XG4gICAgY2xlYXJTdGFjazogKGZuOiBhbnkpID0+IHZvaWQ7XG4gICAgb25FeGNlcHRpb246IChlcnJvcjogYW55KSA9PiB2b2lkO1xuICAgIGNhdGNoRXhjZXB0aW9uOiAoKSA9PiBib29sZWFuO1xuICAgIHVzZXJDb250ZXh0OiBhbnk7XG4gICAgdGltZW91dDoge3NldFRpbWVvdXQ6IEZ1bmN0aW9uLCBjbGVhclRpbWVvdXQ6IEZ1bmN0aW9ufTtcbiAgICBmYWlsOiAoKSA9PiB2b2lkO1xuICB9XG5cbiAgY29uc3QgUXVldWVSdW5uZXIgPSAoamFzbWluZSBhcyBhbnkpLlF1ZXVlUnVubmVyIGFzIHtuZXcgKGF0dHJzOiBRdWV1ZVJ1bm5lckF0dHJzKTogUXVldWVSdW5uZXJ9O1xuICAoamFzbWluZSBhcyBhbnkpLlF1ZXVlUnVubmVyID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhab25lUXVldWVSdW5uZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gWm9uZVF1ZXVlUnVubmVyKGF0dHJzOiB7b25Db21wbGV0ZTogRnVuY3Rpb259KSB7XG4gICAgICBhdHRycy5vbkNvbXBsZXRlID0gKChmbikgPT4gKCkgPT4ge1xuICAgICAgICAvLyBBbGwgZnVuY3Rpb25zIGFyZSBkb25lLCBjbGVhciB0aGUgdGVzdCB6b25lLlxuICAgICAgICB0ZXN0UHJveHlab25lID0gbnVsbDtcbiAgICAgICAgYW1iaWVudFpvbmUuc2NoZWR1bGVNaWNyb1Rhc2soJ2phc21pbmUub25Db21wbGV0ZScsIGZuKTtcbiAgICAgIH0pKGF0dHJzLm9uQ29tcGxldGUpO1xuICAgICAgX3N1cGVyLmNhbGwodGhpcywgYXR0cnMpO1xuICAgIH1cbiAgICBab25lUXVldWVSdW5uZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChab25lLmN1cnJlbnQgIT09IGFtYmllbnRab25lKSB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgWm9uZTogJyArIFpvbmUuY3VycmVudC5uYW1lKTtcbiAgICAgIHRlc3RQcm94eVpvbmUgPSBhbWJpZW50Wm9uZS5mb3JrKG5ldyBQcm94eVpvbmVTcGVjKCkpO1xuICAgICAgaWYgKCFab25lLmN1cnJlbnRUYXNrKSB7XG4gICAgICAgIC8vIGlmIHdlIGFyZSBub3QgcnVubmluZyBpbiBhIHRhc2sgdGhlbiBpZiBzb21lb25lIHdvdWxkIHJlZ2lzdGVyIGFcbiAgICAgICAgLy8gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyIGFuZCB0aGVuIGNhbGxpbmcgZWxlbWVudC5jbGljaygpIHRoZVxuICAgICAgICAvLyBhZGRFdmVudExpc3RlbmVyIGNhbGxiYWNrIHdvdWxkIHRoaW5rIHRoYXQgaXQgaXMgdGhlIHRvcCBtb3N0IHRhc2sgYW5kIHdvdWxkXG4gICAgICAgIC8vIGRyYWluIHRoZSBtaWNyb3Rhc2sgcXVldWUgb24gZWxlbWVudC5jbGljaygpIHdoaWNoIHdvdWxkIGJlIGluY29ycmVjdC5cbiAgICAgICAgLy8gRm9yIHRoaXMgcmVhc29uIHdlIGFsd2F5cyBmb3JjZSBhIHRhc2sgd2hlbiBydW5uaW5nIGphc21pbmUgdGVzdHMuXG4gICAgICAgIFpvbmUuY3VycmVudC5zY2hlZHVsZU1pY3JvVGFzayhcbiAgICAgICAgICAgICdqYXNtaW5lLmV4ZWN1dGUoKS5mb3JjZVRhc2snLCAoKSA9PiBRdWV1ZVJ1bm5lci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFpvbmVRdWV1ZVJ1bm5lcjtcbiAgfShRdWV1ZVJ1bm5lcikpO1xufSkoKTtcbiJdfQ==